package algorithmImpl;

import java.util.Stack;

public class QuickSort {
	
	//private int[] input = {4,7,2,1,6,8,8,3,2,5,9,0,7};
	private int[] input = {26,1,22,44,28,49,44,43,13,19,12,50};
	//Stack<Integer> temp = new Stack<Integer>();
	//private int[] output = new int[input.length];
	
	public int increaseSolution(int begin, int end){
		
		int low = begin;
		int high = end;
		int currentIndex;

		
		currentIndex = step(low, high);
		//System.out.println("\n you are in iteration of: "+input[currentIndex]);
		high = currentIndex;
		//left partition
		while(low<=high-1){
			System.out.println("\n process left part of pivot: "+input[currentIndex]);
			high = increaseSolution(low, high);
		}
		//System.out.println("\n you are in iteration of: "+input[currentIndex]);
		//right partition
		low=currentIndex+1;
		high = end;
		while(low<=high-1){
			System.out.println("\n process right part of pivot: "+input[currentIndex]);
			low = increaseSolution(low, high)+1;
		}
		
		if(low >= high){
			System.out.println("\n ********************");
			System.out.println("complete both partition of pivot: "+input[currentIndex]);
			low++;
		}
		
                                                                                                                                                                                          		return currentIndex;
	}
	
	
	
	
	public void sort_incr(int begin, int end){
		if(begin == end){
			System.out.println("\n"+"*************************************");
			for(int i = 0; i < input.length; i++){
				System.out.print(input[i]+" ");
			}
			System.out.println("\n"+"*************************************");
			return;
		}
		System.out.println("Begin="+begin+", End="+end);
		System.out.print("Processing partition: "+input[begin]+" ");
		int pivot = input[begin];
		int swapIndex = begin + 1;
		for(int i = begin + 1; i < end; i++){
			System.out.print(input[i]+" ");
			if(input[i] < pivot){
				swap(i, swapIndex);
				swapIndex++;
			}
		}
		swap(begin, swapIndex-1);
		System.out.print("\n output Result: ");
		for(int i = begin; i < end; i++){
			System.out.print(" " +input[i]+" ");
		}
		System.out.println();
		
		int low = begin;
		int high = swapIndex-1;//pivot index
		
		if(low < high){
			sort_incr(low, high);
		}else{
			return;
		}
		
		
		//System.out.println("lo="+begin+", End="+end);
		System.out.println("finished left partition of: "+pivot+" ");
		
		
		
		low = swapIndex;
		high = end;
		if(low < high){
			sort_incr(low, high);
		}else{
			return;
		}
		System.out.println("finished right partition of: "+pivot+" ");
		return;
	}


	
	public int step(int low, int high){
		System.out.print("Processing partition: "+input[low]+" ");
		int pivot = input[low];
		int swapIndex = low + 1;
		for(int i = low + 1; i < high; i++){
			System.out.print(input[i]+" ");
			if(input[i] < pivot){
				swap(i, swapIndex);
				swapIndex++;
			}
		}
		swap(low, swapIndex-1);
		//input[low] = pivot;
		//output[swapIndex-1] = pivot;
		System.out.print("\n output Result: ");
		for(int i = low; i < high; i++){
			System.out.print(" " +input[i]+" ");
		}
		System.out.println();
//		temp.push(swapIndex-1);
//		System.out.print("\n value in stack: ");
//		for(int i = 0; i < temp.size(); i++){
//			System.out.print(input[temp.get(i)]+" ");
//		}
		return swapIndex-1;
	}
	
	
	private void swap(int x, int y){
		int temp = input[x];
		input[x] = input[y];
		input[y] = temp;
	}
	
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		QuickSort sort = new QuickSort();
		//sort.increaseSolution(0,sort.input.length);
		//sort.increaseSolution2();
		sort.sort_incr(0, sort.input.length);
		
	}

}
